
Lab06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f74  08003f74  0002033c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f7c  08003f7c  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f7c  08003f7c  00013f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f80  08003f80  00013f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08003f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002033c  2**0
                  CONTENTS
 10 .bss          00000374  2000033c  2000033c  0002033c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006b0  200006b0  0002033c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011174  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024e7  00000000  00000000  000314e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000339c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  000347e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021ce0  00000000  00000000  00035510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc95  00000000  00000000  000571f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1586  00000000  00000000  00066e85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013840b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c20  00000000  00000000  0013845c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000033c 	.word	0x2000033c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f4c 	.word	0x08003f4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000340 	.word	0x20000340
 80001c4:	08003f4c 	.word	0x08003f4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <smol>:
		{A3,_8th,10},{B3,_8th,10},{C4,_8th,10},{D4,_8th,10},{E4,_8th,10},{F4,_8th,10},{G4,_8th,10},{A4,_8th,10},

};

// Finds the smollest note in the song
int smol(int song[NUM_NOTES][NUM_DESCRIPTORS]){
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if(song == NULL){
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d102      	bne.n	80004e0 <smol+0x14>
		return -1;
 80004da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004de:	e019      	b.n	8000514 <smol+0x48>
	}

	int smollest = 99999;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <smol+0x54>)
 80004e2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_NOTES; i++){
 80004e4:	2300      	movs	r3, #0
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	e010      	b.n	800050c <smol+0x40>
		smollest = (smollest < song[i][0])? smollest : song[i][0];
 80004ea:	68ba      	ldr	r2, [r7, #8]
 80004ec:	4613      	mov	r3, r2
 80004ee:	005b      	lsls	r3, r3, #1
 80004f0:	4413      	add	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	461a      	mov	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	4293      	cmp	r3, r2
 8000500:	bfa8      	it	ge
 8000502:	4613      	movge	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_NOTES; i++){
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	3301      	adds	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	2b43      	cmp	r3, #67	; 0x43
 8000510:	ddeb      	ble.n	80004ea <smol+0x1e>
	}

	return smollest;
 8000512:	68fb      	ldr	r3, [r7, #12]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	0001869f 	.word	0x0001869f

08000524 <beeg>:

// Finds the beegest note in the song
int beeg(int song[NUM_NOTES][NUM_DESCRIPTORS]){
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if(song == NULL){
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d102      	bne.n	8000538 <beeg+0x14>
		return -1;
 8000532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000536:	e01a      	b.n	800056e <beeg+0x4a>
	}

	int beegest = -1;
 8000538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053c:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_NOTES; i++){
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	e010      	b.n	8000566 <beeg+0x42>
		beegest = (beegest > song[i][0])? beegest : song[i][0];
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	009b      	lsls	r3, r3, #2
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4413      	add	r3, r2
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	68fa      	ldr	r2, [r7, #12]
 8000558:	4293      	cmp	r3, r2
 800055a:	bfb8      	it	lt
 800055c:	4613      	movlt	r3, r2
 800055e:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_NOTES; i++){
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	3301      	adds	r3, #1
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
 8000568:	2b43      	cmp	r3, #67	; 0x43
 800056a:	ddeb      	ble.n	8000544 <beeg+0x20>
	}

	return beegest;
 800056c:	68fb      	ldr	r3, [r7, #12]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <display>:

int display(int myVar, int incr, int smallest){
 800057a:	b480      	push	{r7}
 800057c:	b085      	sub	sp, #20
 800057e:	af00      	add	r7, sp, #0
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	607a      	str	r2, [r7, #4]
	if(myVar == 0){
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <display+0x18>
		return -1;
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000590:	e048      	b.n	8000624 <display+0xaa>
	}
    if(myVar < incr+smallest){
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4413      	add	r3, r2
 8000598:	68fa      	ldr	r2, [r7, #12]
 800059a:	429a      	cmp	r2, r3
 800059c:	da01      	bge.n	80005a2 <display+0x28>
    	return 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	e040      	b.n	8000624 <display+0xaa>
	} else if (myVar <= incr*2+smallest){
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	005a      	lsls	r2, r3, #1
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	68fa      	ldr	r2, [r7, #12]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	dc01      	bgt.n	80005b4 <display+0x3a>
    	return 1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	e037      	b.n	8000624 <display+0xaa>
	} else if (myVar <= incr*3+smallest){
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	441a      	add	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dc01      	bgt.n	80005ca <display+0x50>
    	return 2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	e02c      	b.n	8000624 <display+0xaa>
	} else if (myVar <= incr*4+smallest){
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	009a      	lsls	r2, r3, #2
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dc01      	bgt.n	80005dc <display+0x62>
    	return 3;
 80005d8:	2303      	movs	r3, #3
 80005da:	e023      	b.n	8000624 <display+0xaa>
	} else if (myVar <= incr*5+smallest){
 80005dc:	68ba      	ldr	r2, [r7, #8]
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	441a      	add	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4413      	add	r3, r2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dc01      	bgt.n	80005f2 <display+0x78>
    	return 4;
 80005ee:	2304      	movs	r3, #4
 80005f0:	e018      	b.n	8000624 <display+0xaa>
	} else if (myVar <= incr*6+smallest){
 80005f2:	68ba      	ldr	r2, [r7, #8]
 80005f4:	4613      	mov	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	4413      	add	r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	dc01      	bgt.n	800060c <display+0x92>
    	return 5;
 8000608:	2305      	movs	r3, #5
 800060a:	e00b      	b.n	8000624 <display+0xaa>
	} else if (myVar <= incr*7+smallest){
 800060c:	68ba      	ldr	r2, [r7, #8]
 800060e:	4613      	mov	r3, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	1a9a      	subs	r2, r3, r2
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	429a      	cmp	r2, r3
 800061c:	dc01      	bgt.n	8000622 <display+0xa8>
    	return 6;
 800061e:	2306      	movs	r3, #6
 8000620:	e000      	b.n	8000624 <display+0xaa>
	} else {
    	return 7;
 8000622:	2307      	movs	r3, #7
	}
}
 8000624:	4618      	mov	r0, r3
 8000626:	3714      	adds	r7, #20
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08d      	sub	sp, #52	; 0x34
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fca5 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f8fd 	bl	8000838 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f99b 	bl	8000978 <MX_GPIO_Init>
  MX_TIM7_Init();
 8000642:	f000 f963 	bl	800090c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  /*** Configure GPIOs ***/
  GPIOD->MODER = 0x55555555; // set all Port D pins to outputs
 8000646:	4b74      	ldr	r3, [pc, #464]	; (8000818 <main+0x1e8>)
 8000648:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 800064c:	601a      	str	r2, [r3, #0]
  GPIOE->MODER |= 0x55555555;
 800064e:	4b73      	ldr	r3, [pc, #460]	; (800081c <main+0x1ec>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a72      	ldr	r2, [pc, #456]	; (800081c <main+0x1ec>)
 8000654:	f043 3355 	orr.w	r3, r3, #1431655765	; 0x55555555
 8000658:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= 0x000000FF;
 800065a:	4b71      	ldr	r3, [pc, #452]	; (8000820 <main+0x1f0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a70      	ldr	r2, [pc, #448]	; (8000820 <main+0x1f0>)
 8000660:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8000664:	6013      	str	r3, [r2, #0]
  GPIOE->OTYPER |= 0xFF00;
 8000666:	4b6d      	ldr	r3, [pc, #436]	; (800081c <main+0x1ec>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	4a6c      	ldr	r2, [pc, #432]	; (800081c <main+0x1ec>)
 800066c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 8000670:	6053      	str	r3, [r2, #4]

  //Configure ADC1
  RCC->APB2ENR |= 1<<8;
 8000672:	4b6c      	ldr	r3, [pc, #432]	; (8000824 <main+0x1f4>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000676:	4a6b      	ldr	r2, [pc, #428]	; (8000824 <main+0x1f4>)
 8000678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067c:	6453      	str	r3, [r2, #68]	; 0x44
  ADC1->SMPR2 |= 1;
 800067e:	4b6a      	ldr	r3, [pc, #424]	; (8000828 <main+0x1f8>)
 8000680:	691b      	ldr	r3, [r3, #16]
 8000682:	4a69      	ldr	r2, [pc, #420]	; (8000828 <main+0x1f8>)
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	6113      	str	r3, [r2, #16]
  ADC1->CR2 |= 1;
 800068a:	4b67      	ldr	r3, [pc, #412]	; (8000828 <main+0x1f8>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	4a66      	ldr	r2, [pc, #408]	; (8000828 <main+0x1f8>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6093      	str	r3, [r2, #8]
  RCC->AHB1ENR |= 1<<5; // Enable clock for timer 7
  __enable_irq(); // Enable interrupts
  NVIC_EnableIRQ(TIM7_IRQn); // Enable Timer 7 Interrupt in the NVIC controller
  *******************************************************************************************************/

  TIM7->PSC = 167; //1Mhz timer clock prescaler value, 1Mhz = 168Mhz / (167 + 1)
 8000696:	4b65      	ldr	r3, [pc, #404]	; (800082c <main+0x1fc>)
 8000698:	22a7      	movs	r2, #167	; 0xa7
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM7->ARR = 3; // 1MHz/(3+1) = 250Khz interrupt rate to increment byte counter for 250Khz/256 = 976Hz PWM
 800069c:	4b63      	ldr	r3, [pc, #396]	; (800082c <main+0x1fc>)
 800069e:	2203      	movs	r2, #3
 80006a0:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM7->DIER |= 1; // Enable timer 7 interrupt
 80006a2:	4b62      	ldr	r3, [pc, #392]	; (800082c <main+0x1fc>)
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	4a61      	ldr	r2, [pc, #388]	; (800082c <main+0x1fc>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	60d3      	str	r3, [r2, #12]
  TIM7->CR1 |= 1; // Enable timer counting
 80006ae:	4b5f      	ldr	r3, [pc, #380]	; (800082c <main+0x1fc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a5e      	ldr	r2, [pc, #376]	; (800082c <main+0x1fc>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  int smallest = smol(Song);
 80006ba:	485d      	ldr	r0, [pc, #372]	; (8000830 <main+0x200>)
 80006bc:	f7ff ff06 	bl	80004cc <smol>
 80006c0:	62b8      	str	r0, [r7, #40]	; 0x28
  int biggest = beeg(Song);
 80006c2:	485b      	ldr	r0, [pc, #364]	; (8000830 <main+0x200>)
 80006c4:	f7ff ff2e 	bl	8000524 <beeg>
 80006c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Seven_Segment(0x5AFE0000);
 80006ca:	485a      	ldr	r0, [pc, #360]	; (8000834 <main+0x204>)
 80006cc:	f000 fab6 	bl	8000c3c <Seven_Segment>

	  int i;
	  float incr = (biggest - smallest)/8;
 80006d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	da00      	bge.n	80006dc <main+0xac>
 80006da:	3307      	adds	r3, #7
 80006dc:	10db      	asrs	r3, r3, #3
 80006de:	ee07 3a90 	vmov	s15, r3
 80006e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e6:	edc7 7a08 	vstr	s15, [r7, #32]


	  //The rightmost LED is in use by the Piezo buzzer, don't heck with it yo
	  /* play the tune defined in the array Song */
	  for (i = 0;i<(sizeof(Song)/sizeof(Song[0]));i++) // determine number of elements in array for loop maximum
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006ee:	e08e      	b.n	800080e <main+0x1de>
	  {

	      int myVar = Song[i][0];
 80006f0:	494f      	ldr	r1, [pc, #316]	; (8000830 <main+0x200>)
 80006f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006f4:	4613      	mov	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	61fb      	str	r3, [r7, #28]
		  int next1 = Song[i+1][0];
 8000702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	494a      	ldr	r1, [pc, #296]	; (8000830 <main+0x200>)
 8000708:	4613      	mov	r3, r2
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	440b      	add	r3, r1
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	61bb      	str	r3, [r7, #24]
		  int next2 = Song[i+2][0];
 8000716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000718:	1c9a      	adds	r2, r3, #2
 800071a:	4945      	ldr	r1, [pc, #276]	; (8000830 <main+0x200>)
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	440b      	add	r3, r1
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	617b      	str	r3, [r7, #20]
		  int next3 = Song[i+3][0];
 800072a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072c:	1cda      	adds	r2, r3, #3
 800072e:	4940      	ldr	r1, [pc, #256]	; (8000830 <main+0x200>)
 8000730:	4613      	mov	r3, r2
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	4413      	add	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	440b      	add	r3, r1
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	613b      	str	r3, [r7, #16]

		  int pos = display(myVar, incr, smallest);
 800073e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000748:	ee17 1a90 	vmov	r1, s15
 800074c:	69f8      	ldr	r0, [r7, #28]
 800074e:	f7ff ff14 	bl	800057a <display>
 8000752:	60f8      	str	r0, [r7, #12]
		  int pos1 = display(next1, incr, smallest);
 8000754:	edd7 7a08 	vldr	s15, [r7, #32]
 8000758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800075c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800075e:	ee17 1a90 	vmov	r1, s15
 8000762:	69b8      	ldr	r0, [r7, #24]
 8000764:	f7ff ff09 	bl	800057a <display>
 8000768:	60b8      	str	r0, [r7, #8]
		  int pos2 = display(next2, incr, smallest);
 800076a:	edd7 7a08 	vldr	s15, [r7, #32]
 800076e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000774:	ee17 1a90 	vmov	r1, s15
 8000778:	6978      	ldr	r0, [r7, #20]
 800077a:	f7ff fefe 	bl	800057a <display>
 800077e:	6078      	str	r0, [r7, #4]
		  int pos3 = display(next3, incr, smallest);
 8000780:	edd7 7a08 	vldr	s15, [r7, #32]
 8000784:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800078a:	ee17 1a90 	vmov	r1, s15
 800078e:	6938      	ldr	r0, [r7, #16]
 8000790:	f7ff fef3 	bl	800057a <display>
 8000794:	6038      	str	r0, [r7, #0]

		  Seven_Segment(0x0);
 8000796:	2000      	movs	r0, #0
 8000798:	f000 fa50 	bl	8000c3c <Seven_Segment>
		  Seven_Segment_Digit(pos, 0xb);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	210b      	movs	r1, #11
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 fa12 	bl	8000bcc <Seven_Segment_Digit>
		  Seven_Segment_Digit(pos1, 0x1);
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2101      	movs	r1, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 fa0c 	bl	8000bcc <Seven_Segment_Digit>
		  Seven_Segment_Digit(pos2, 0x2);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2102      	movs	r1, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fa06 	bl	8000bcc <Seven_Segment_Digit>
		  Seven_Segment_Digit(pos3, 0x3);
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	2103      	movs	r1, #3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fa00 	bl	8000bcc <Seven_Segment_Digit>

		  Play_Note(Song[i][0],Song[i][1],3200,Song[i][2]); // Call function to play each note
 80007cc:	4918      	ldr	r1, [pc, #96]	; (8000830 <main+0x200>)
 80007ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007d0:	4613      	mov	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	4413      	add	r3, r2
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	440b      	add	r3, r1
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4914      	ldr	r1, [pc, #80]	; (8000830 <main+0x200>)
 80007de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	440b      	add	r3, r1
 80007ea:	3304      	adds	r3, #4
 80007ec:	6819      	ldr	r1, [r3, #0]
 80007ee:	4c10      	ldr	r4, [pc, #64]	; (8000830 <main+0x200>)
 80007f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	4423      	add	r3, r4
 80007fc:	3308      	adds	r3, #8
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000804:	f000 f9b6 	bl	8000b74 <Play_Note>
	  for (i = 0;i<(sizeof(Song)/sizeof(Song[0]));i++) // determine number of elements in array for loop maximum
 8000808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080a:	3301      	adds	r3, #1
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000810:	2b43      	cmp	r3, #67	; 0x43
 8000812:	f67f af6d 	bls.w	80006f0 <main+0xc0>
  {
 8000816:	e758      	b.n	80006ca <main+0x9a>
 8000818:	40020c00 	.word	0x40020c00
 800081c:	40021000 	.word	0x40021000
 8000820:	40020000 	.word	0x40020000
 8000824:	40023800 	.word	0x40023800
 8000828:	40012000 	.word	0x40012000
 800082c:	40001400 	.word	0x40001400
 8000830:	20000000 	.word	0x20000000
 8000834:	5afe0000 	.word	0x5afe0000

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b094      	sub	sp, #80	; 0x50
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0320 	add.w	r3, r7, #32
 8000842:	2230      	movs	r2, #48	; 0x30
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f003 fb78 	bl	8003f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <SystemClock_Config+0xcc>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a27      	ldr	r2, [pc, #156]	; (8000904 <SystemClock_Config+0xcc>)
 8000866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b25      	ldr	r3, [pc, #148]	; (8000904 <SystemClock_Config+0xcc>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <SystemClock_Config+0xd0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a21      	ldr	r2, [pc, #132]	; (8000908 <SystemClock_Config+0xd0>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6013      	str	r3, [r2, #0]
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <SystemClock_Config+0xd0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008a8:	2308      	movs	r3, #8
 80008aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b6:	2307      	movs	r3, #7
 80008b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 ffe8 	bl	8002894 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80008ca:	f000 f979 	bl	8000bc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2302      	movs	r3, #2
 80008d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2105      	movs	r1, #5
 80008ec:	4618      	mov	r0, r3
 80008ee:	f002 fa49 	bl	8002d84 <HAL_RCC_ClockConfig>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008f8:	f000 f962 	bl	8000bc0 <Error_Handler>
  }
}
 80008fc:	bf00      	nop
 80008fe:	3750      	adds	r7, #80	; 0x50
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40023800 	.word	0x40023800
 8000908:	40007000 	.word	0x40007000

0800090c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM7_Init+0x64>)
 800091c:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_TIM7_Init+0x68>)
 800091e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_TIM7_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <MX_TIM7_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_TIM7_Init+0x64>)
 800092e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000932:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_TIM7_Init+0x64>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM7_Init+0x64>)
 800093c:	f002 fc0e 	bl	800315c <HAL_TIM_Base_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8000946:	f000 f93b 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_TIM7_Init+0x64>)
 8000958:	f002 fe2a 	bl	80035b0 <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8000962:	f000 f92d 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000358 	.word	0x20000358
 8000974:	40001400 	.word	0x40001400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08c      	sub	sp, #48	; 0x30
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	61bb      	str	r3, [r7, #24]
 8000992:	4b72      	ldr	r3, [pc, #456]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	61bb      	str	r3, [r7, #24]
 80009a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
 80009ae:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b68      	ldr	r3, [pc, #416]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a63      	ldr	r2, [pc, #396]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b61      	ldr	r3, [pc, #388]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b5d      	ldr	r3, [pc, #372]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a5c      	ldr	r2, [pc, #368]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b5a      	ldr	r3, [pc, #360]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b56      	ldr	r3, [pc, #344]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a55      	ldr	r2, [pc, #340]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b53      	ldr	r3, [pc, #332]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b4f      	ldr	r3, [pc, #316]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a4e      	ldr	r2, [pc, #312]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a24:	f043 0308 	orr.w	r3, r3, #8
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b4c      	ldr	r3, [pc, #304]	; (8000b5c <MX_GPIO_Init+0x1e4>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0308 	and.w	r3, r3, #8
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4849      	ldr	r0, [pc, #292]	; (8000b60 <MX_GPIO_Init+0x1e8>)
 8000a3c:	f000 fde6 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2101      	movs	r1, #1
 8000a44:	4847      	ldr	r0, [pc, #284]	; (8000b64 <MX_GPIO_Init+0x1ec>)
 8000a46:	f000 fde1 	bl	800160c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a50:	4845      	ldr	r0, [pc, #276]	; (8000b68 <MX_GPIO_Init+0x1f0>)
 8000a52:	f000 fddb 	bl	800160c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a56:	2308      	movs	r3, #8
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	483c      	ldr	r0, [pc, #240]	; (8000b60 <MX_GPIO_Init+0x1e8>)
 8000a6e:	f000 fc31 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4836      	ldr	r0, [pc, #216]	; (8000b64 <MX_GPIO_Init+0x1ec>)
 8000a8a:	f000 fc23 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	482e      	ldr	r0, [pc, #184]	; (8000b64 <MX_GPIO_Init+0x1ec>)
 8000aaa:	f000 fc13 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482a      	ldr	r0, [pc, #168]	; (8000b6c <MX_GPIO_Init+0x1f4>)
 8000ac4:	f000 fc06 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 031c 	add.w	r3, r7, #28
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4825      	ldr	r0, [pc, #148]	; (8000b70 <MX_GPIO_Init+0x1f8>)
 8000adc:	f000 fbfa 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af2:	2305      	movs	r3, #5
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	481c      	ldr	r0, [pc, #112]	; (8000b70 <MX_GPIO_Init+0x1f8>)
 8000afe:	f000 fbe9 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000b02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_GPIO_Init+0x1f0>)
 8000b1c:	f000 fbda 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b20:	2320      	movs	r3, #32
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_GPIO_Init+0x1f0>)
 8000b34:	f000 fbce 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b3c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_GPIO_Init+0x1e8>)
 8000b4e:	f000 fbc1 	bl	80012d4 <HAL_GPIO_Init>

}
 8000b52:	bf00      	nop
 8000b54:	3730      	adds	r7, #48	; 0x30
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020400 	.word	0x40020400

08000b74 <Play_Note>:
/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

void Play_Note(int note,int size,int tempo,int space)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	603b      	str	r3, [r7, #0]
	Note = note; // Assign passed note parameter to global Note variable
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <Play_Note+0x48>)
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6013      	str	r3, [r2, #0]

	// Delay to hold note for the duration of the note size, e.g. Whole note, half note, etc.
	if (size > 0 && size <= 64) HAL_Delay(tempo/size-space); // Delay based on tempo, note size, and note separation (space)
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	dd0b      	ble.n	8000ba6 <Play_Note+0x32>
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2b40      	cmp	r3, #64	; 0x40
 8000b92:	dc08      	bgt.n	8000ba6 <Play_Note+0x32>
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f000 fa61 	bl	8001068 <HAL_Delay>
	Note = 0; // Turn note off
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <Play_Note+0x48>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
	HAL_Delay(space); // Delay for the amount of silence needed to separate notes from each other
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fa5a 	bl	8001068 <HAL_Delay>
}
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200003a4 	.word	0x200003a4

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
}
 8000bc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <Error_Handler+0x8>
	...

08000bcc <Seven_Segment_Digit>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
void Seven_Segment_Digit (unsigned char digit, unsigned char hex_char)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	71fb      	strb	r3, [r7, #7]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	71bb      	strb	r3, [r7, #6]
/*******************************************************************************
Code to mask and bit shift 0-7 value of digit and 0-15 value of hex_char
to output correct bit pattern to GPIO_Output
*******************************************************************************/

        GPIOE->ODR = 0xC000 | ((~digit & 3) << 12) | ((hex_char & 0xF) << 8);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	43db      	mvns	r3, r3
 8000be0:	031b      	lsls	r3, r3, #12
 8000be2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8000be6:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8000bea:	79bb      	ldrb	r3, [r7, #6]
 8000bec:	021b      	lsls	r3, r3, #8
 8000bee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000bf6:	615a      	str	r2, [r3, #20]

        HAL_Delay(1); // delay for 1 milliseconds
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fa35 	bl	8001068 <HAL_Delay>
        // if digit > 3 set upper character chip select bit low using a mask value in GPIO_Output
        if (digit > 3) GPIOE->ODR &= ~(1 << 15);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b03      	cmp	r3, #3
 8000c02:	d906      	bls.n	8000c12 <Seven_Segment_Digit+0x46>
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000c0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c0e:	6153      	str	r3, [r2, #20]
 8000c10:	e005      	b.n	8000c1e <Seven_Segment_Digit+0x52>
        // else set lower character chip select bit low using a mask value in GPIO_Output
        else GPIOE->ODR &= ~(1 << 14);
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	4a08      	ldr	r2, [pc, #32]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000c18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c1c:	6153      	str	r3, [r2, #20]

        HAL_Delay(1); // delay for 1 milliseconds
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fa22 	bl	8001068 <HAL_Delay>
        GPIOE->ODR |= 0xC000;
 8000c24:	4b04      	ldr	r3, [pc, #16]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	4a03      	ldr	r2, [pc, #12]	; (8000c38 <Seven_Segment_Digit+0x6c>)
 8000c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c2e:	6153      	str	r3, [r2, #20]
        return;
 8000c30:	bf00      	nop
}
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000

08000c3c <Seven_Segment>:

void Seven_Segment(unsigned int HexValue)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
/******************************************************************************
Use a for loop to output HexValue to 7 segment display digits
*******************************************************************************/
        char digit;
        // Send hex values to lower 4 digits
        for (digit=0 ; digit<8 ; digit++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e010      	b.n	8000c6c <Seven_Segment+0x30>
        {
           Seven_Segment_Digit(digit,(HexValue >> (digit*4)) & 0xF);
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	fa22 f303 	lsr.w	r3, r2, r3
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ffb3 	bl	8000bcc <Seven_Segment_Digit>
        for (digit=0 ; digit<8 ; digit++)
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	73fb      	strb	r3, [r7, #15]
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b07      	cmp	r3, #7
 8000c70:	d9eb      	bls.n	8000c4a <Seven_Segment+0xe>
        }

        return;
 8000c72:	bf00      	nop
}
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c90:	6453      	str	r3, [r2, #68]	; 0x44
 8000c92:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	4a08      	ldr	r2, [pc, #32]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cac:	6413      	str	r3, [r2, #64]	; 0x40
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_MspInit+0x4c>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f000 fac8 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40023800 	.word	0x40023800

08000ccc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_TIM_Base_MspInit+0x48>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d115      	bne.n	8000d0a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a0c      	ldr	r2, [pc, #48]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_TIM_Base_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 0320 	and.w	r3, r3, #32
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2037      	movs	r0, #55	; 0x37
 8000d00:	f000 fab1 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000d04:	2037      	movs	r0, #55	; 0x37
 8000d06:	f000 faca 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40001400 	.word	0x40001400
 8000d18:	40023800 	.word	0x40023800

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <NMI_Handler+0x4>

08000d22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d26:	e7fe      	b.n	8000d26 <HardFault_Handler+0x4>

08000d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler+0x4>

08000d2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//Move the paddle around based on the value of the ADC
	ADC1->SQR3 = 1;
 8000d6a:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <SysTick_Handler+0x128>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->CR2 |= 1<<30;
 8000d70:	4b46      	ldr	r3, [pc, #280]	; (8000e8c <SysTick_Handler+0x128>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a45      	ldr	r2, [pc, #276]	; (8000e8c <SysTick_Handler+0x128>)
 8000d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d7a:	6093      	str	r3, [r2, #8]
	int myVar = ADC1->DR;
 8000d7c:	4b43      	ldr	r3, [pc, #268]	; (8000e8c <SysTick_Handler+0x128>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	607b      	str	r3, [r7, #4]
	const int DELIM = 512;
 8000d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d86:	603b      	str	r3, [r7, #0]
	if(myVar > 0 && myVar < DELIM){
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dd0c      	ble.n	8000da8 <SysTick_Handler+0x44>
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	da08      	bge.n	8000da8 <SysTick_Handler+0x44>
	  GPIOD->ODR = 2 | (GPIOD->ODR & 1);
 8000d96:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <SysTick_Handler+0x12c>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	4a3c      	ldr	r2, [pc, #240]	; (8000e90 <SysTick_Handler+0x12c>)
 8000da0:	f043 0302 	orr.w	r3, r3, #2
 8000da4:	6153      	str	r3, [r2, #20]
 8000da6:	e06a      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*2){
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	da08      	bge.n	8000dc4 <SysTick_Handler+0x60>
	  GPIOD->ODR = 3<<2 | (GPIOD->ODR & 1);
 8000db2:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <SysTick_Handler+0x12c>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	4a35      	ldr	r2, [pc, #212]	; (8000e90 <SysTick_Handler+0x12c>)
 8000dbc:	f043 030c 	orr.w	r3, r3, #12
 8000dc0:	6153      	str	r3, [r2, #20]
 8000dc2:	e05c      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*3){
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	4413      	add	r3, r2
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	da08      	bge.n	8000de4 <SysTick_Handler+0x80>
	  GPIOD->ODR = 3<<4 | (GPIOD->ODR & 1);
 8000dd2:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <SysTick_Handler+0x12c>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <SysTick_Handler+0x12c>)
 8000ddc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000de0:	6153      	str	r3, [r2, #20]
 8000de2:	e04c      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*4){
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	da08      	bge.n	8000e00 <SysTick_Handler+0x9c>
	  GPIOD->ODR = 3<<6 | (GPIOD->ODR & 1);
 8000dee:	4b28      	ldr	r3, [pc, #160]	; (8000e90 <SysTick_Handler+0x12c>)
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <SysTick_Handler+0x12c>)
 8000df8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000dfc:	6153      	str	r3, [r2, #20]
 8000dfe:	e03e      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*5){
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	da08      	bge.n	8000e20 <SysTick_Handler+0xbc>
	  GPIOD->ODR = 3<<8 | (GPIOD->ODR & 1);
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	4a1e      	ldr	r2, [pc, #120]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e18:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000e1c:	6153      	str	r3, [r2, #20]
 8000e1e:	e02e      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*6){
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	4613      	mov	r3, r2
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	4413      	add	r3, r2
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	da08      	bge.n	8000e44 <SysTick_Handler+0xe0>
	  GPIOD->ODR = 3<<10 | (GPIOD->ODR & 1);
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e3c:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000e40:	6153      	str	r3, [r2, #20]
 8000e42:	e01c      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*7){
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	4613      	mov	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	687a      	ldr	r2, [r7, #4]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	da08      	bge.n	8000e64 <SysTick_Handler+0x100>
	  GPIOD->ODR = 3<<12 | (GPIOD->ODR & 1);
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e5c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	e00c      	b.n	8000e7e <SysTick_Handler+0x11a>
	} else if (myVar < DELIM*8){
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	da07      	bge.n	8000e7e <SysTick_Handler+0x11a>
	  GPIOD->ODR = 3<<14 | (GPIOD->ODR & 1);
 8000e6e:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <SysTick_Handler+0x12c>)
 8000e78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e7c:	6153      	str	r3, [r2, #20]
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7e:	f000 f8d3 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40012000 	.word	0x40012000
 8000e90:	40020c00 	.word	0x40020c00

08000e94 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */


	TONE++; // Increment tone ramp to divide 125Khz down to desire frequency
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <TIM7_IRQHandler+0x54>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <TIM7_IRQHandler+0x54>)
 8000ea2:	6013      	str	r3, [r2, #0]

	if (Note > 0) // If a note is to be played, generate it. 0 is a rest or silence.
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <TIM7_IRQHandler+0x58>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	dd12      	ble.n	8000ed2 <TIM7_IRQHandler+0x3e>
	{

		if (Note <= TONE) // When the TONE ramp counter reaches the desired result divisor, toggle the output
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <TIM7_IRQHandler+0x58>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <TIM7_IRQHandler+0x54>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	dc0f      	bgt.n	8000ed8 <TIM7_IRQHandler+0x44>
		{
			int myval = GPIOD->ODR;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <TIM7_IRQHandler+0x5c>)
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	607b      	str	r3, [r7, #4]
			GPIOD->ODR ^= 1; // Toggle the piezo buzzer output
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <TIM7_IRQHandler+0x5c>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <TIM7_IRQHandler+0x5c>)
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	6153      	str	r3, [r2, #20]
			TONE = 0; // Reset the TONE ramp counter to zero
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <TIM7_IRQHandler+0x54>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e002      	b.n	8000ed8 <TIM7_IRQHandler+0x44>
		}
	}
	else
	{
		TONE = 0; // Reset the TONE ramp counter to zero
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <TIM7_IRQHandler+0x54>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	}



  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <TIM7_IRQHandler+0x60>)
 8000eda:	f002 f98e 	bl	80031fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200003a0 	.word	0x200003a0
 8000eec:	200003a4 	.word	0x200003a4
 8000ef0:	40020c00 	.word	0x40020c00
 8000ef4:	20000358 	.word	0x20000358

08000ef8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <OTG_FS_IRQHandler+0x10>)
 8000efe:	f000 fb9e 	bl	800163e <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200003ac 	.word	0x200003ac

08000f0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <SystemInit+0x20>)
 8000f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <SystemInit+0x20>)
 8000f18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f36:	490e      	ldr	r1, [pc, #56]	; (8000f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f38:	4a0e      	ldr	r2, [pc, #56]	; (8000f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f3c:	e002      	b.n	8000f44 <LoopCopyDataInit>

08000f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f42:	3304      	adds	r3, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f48:	d3f9      	bcc.n	8000f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f4c:	4c0b      	ldr	r4, [pc, #44]	; (8000f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f50:	e001      	b.n	8000f56 <LoopFillZerobss>

08000f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f54:	3204      	adds	r2, #4

08000f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f58:	d3fb      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f5a:	f7ff ffd7 	bl	8000f0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5e:	f002 ffc9 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f62:	f7ff fb65 	bl	8000630 <main>
  bx  lr    
 8000f66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8000f74:	08003f84 	.word	0x08003f84
  ldr r2, =_sbss
 8000f78:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8000f7c:	200006b0 	.word	0x200006b0

08000f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <HAL_Init+0x40>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	; (8000fc4 <HAL_Init+0x40>)
 8000f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_Init+0x40>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_Init+0x40>)
 8000f9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_Init+0x40>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_Init+0x40>)
 8000fa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f94f 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff fe60 	bl	8000c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40023c00 	.word	0x40023c00

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f967 	bl	80012ba <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001004:	f000 f92f 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000330 	.word	0x20000330
 8001020:	20000338 	.word	0x20000338
 8001024:	20000334 	.word	0x20000334

08001028 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000338 	.word	0x20000338
 800104c:	200003a8 	.word	0x200003a8

08001050 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200003a8 	.word	0x200003a8

08001068 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ffee 	bl	8001050 <HAL_GetTick>
 8001074:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001080:	d005      	beq.n	800108e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_Delay+0x44>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	461a      	mov	r2, r3
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4413      	add	r3, r2
 800108c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800108e:	bf00      	nop
 8001090:	f7ff ffde 	bl	8001050 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	429a      	cmp	r2, r3
 800109e:	d8f7      	bhi.n	8001090 <HAL_Delay+0x28>
  {
  }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000338 	.word	0x20000338

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e16b      	b.n	80015c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 815a 	bne.w	80015c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	2b02      	cmp	r3, #2
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80b4 	beq.w	80015c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b60      	ldr	r3, [pc, #384]	; (80015e0 <HAL_GPIO_Init+0x30c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a5f      	ldr	r2, [pc, #380]	; (80015e0 <HAL_GPIO_Init+0x30c>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <HAL_GPIO_Init+0x30c>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a5b      	ldr	r2, [pc, #364]	; (80015e4 <HAL_GPIO_Init+0x310>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a52      	ldr	r2, [pc, #328]	; (80015e8 <HAL_GPIO_Init+0x314>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d02b      	beq.n	80014fa <HAL_GPIO_Init+0x226>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a51      	ldr	r2, [pc, #324]	; (80015ec <HAL_GPIO_Init+0x318>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d025      	beq.n	80014f6 <HAL_GPIO_Init+0x222>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a50      	ldr	r2, [pc, #320]	; (80015f0 <HAL_GPIO_Init+0x31c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d01f      	beq.n	80014f2 <HAL_GPIO_Init+0x21e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <HAL_GPIO_Init+0x320>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d019      	beq.n	80014ee <HAL_GPIO_Init+0x21a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d013      	beq.n	80014ea <HAL_GPIO_Init+0x216>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4d      	ldr	r2, [pc, #308]	; (80015fc <HAL_GPIO_Init+0x328>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00d      	beq.n	80014e6 <HAL_GPIO_Init+0x212>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	; (8001600 <HAL_GPIO_Init+0x32c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d007      	beq.n	80014e2 <HAL_GPIO_Init+0x20e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a4b      	ldr	r2, [pc, #300]	; (8001604 <HAL_GPIO_Init+0x330>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d101      	bne.n	80014de <HAL_GPIO_Init+0x20a>
 80014da:	2307      	movs	r3, #7
 80014dc:	e00e      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014de:	2308      	movs	r3, #8
 80014e0:	e00c      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e00a      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x228>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4935      	ldr	r1, [pc, #212]	; (80015e4 <HAL_GPIO_Init+0x310>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_GPIO_Init+0x334>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153e:	4a32      	ldr	r2, [pc, #200]	; (8001608 <HAL_GPIO_Init+0x334>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001544:	4b30      	ldr	r3, [pc, #192]	; (8001608 <HAL_GPIO_Init+0x334>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001568:	4a27      	ldr	r2, [pc, #156]	; (8001608 <HAL_GPIO_Init+0x334>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156e:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_GPIO_Init+0x334>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001592:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_GPIO_Init+0x334>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_GPIO_Init+0x334>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015bc:	4a12      	ldr	r2, [pc, #72]	; (8001608 <HAL_GPIO_Init+0x334>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f ae90 	bls.w	80012f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	bf00      	nop
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40013800 	.word	0x40013800
 80015e8:	40020000 	.word	0x40020000
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020800 	.word	0x40020800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40021400 	.word	0x40021400
 8001600:	40021800 	.word	0x40021800
 8001604:	40021c00 	.word	0x40021c00
 8001608:	40013c00 	.word	0x40013c00

0800160c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	460b      	mov	r3, r1
 8001616:	807b      	strh	r3, [r7, #2]
 8001618:	4613      	mov	r3, r2
 800161a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800161c:	787b      	ldrb	r3, [r7, #1]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001622:	887a      	ldrh	r2, [r7, #2]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001628:	e003      	b.n	8001632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800162a:	887b      	ldrh	r3, [r7, #2]
 800162c:	041a      	lsls	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	619a      	str	r2, [r3, #24]
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 f92c 	bl	80038b2 <USB_GetMode>
 800165a:	4603      	mov	r3, r0
 800165c:	2b01      	cmp	r3, #1
 800165e:	f040 80f6 	bne.w	800184e <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f002 f910 	bl	800388c <USB_ReadInterrupts>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80ec 	beq.w	800184c <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f002 f907 	bl	800388c <USB_ReadInterrupts>
 800167e:	4603      	mov	r3, r0
 8001680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001684:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001688:	d104      	bne.n	8001694 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001692:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 f8f7 	bl	800388c <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80016a8:	d104      	bne.n	80016b4 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016b2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 f8e7 	bl	800388c <USB_ReadInterrupts>
 80016be:	4603      	mov	r3, r0
 80016c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80016c8:	d104      	bne.n	80016d4 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d2:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4618      	mov	r0, r3
 80016da:	f002 f8d7 	bl	800388c <USB_ReadInterrupts>
 80016de:	4603      	mov	r3, r0
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d103      	bne.n	80016f0 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2202      	movs	r2, #2
 80016ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f8c9 	bl	800388c <USB_ReadInterrupts>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001700:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001704:	d11c      	bne.n	8001740 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800170e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d10f      	bne.n	8001740 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001720:	2110      	movs	r1, #16
 8001722:	6938      	ldr	r0, [r7, #16]
 8001724:	f001 fff6 	bl	8003714 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001728:	6938      	ldr	r0, [r7, #16]
 800172a:	f002 f827 	bl	800377c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2101      	movs	r1, #1
 8001734:	4618      	mov	r0, r3
 8001736:	f002 f8ca 	bl	80038ce <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f002 fb5b 	bl	8003df6 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f002 f8a1 	bl	800388c <USB_ReadInterrupts>
 800174a:	4603      	mov	r3, r0
 800174c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001754:	d102      	bne.n	800175c <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 f829 	bl	80027ae <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f002 f893 	bl	800388c <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b08      	cmp	r3, #8
 800176e:	d106      	bne.n	800177e <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f002 fb24 	bl	8003dbe <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2208      	movs	r2, #8
 800177c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f002 f882 	bl	800388c <USB_ReadInterrupts>
 8001788:	4603      	mov	r3, r0
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	2b10      	cmp	r3, #16
 8001790:	d101      	bne.n	8001796 <HAL_HCD_IRQHandler+0x158>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_HCD_IRQHandler+0x15a>
 8001796:	2300      	movs	r3, #0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f022 0210 	bic.w	r2, r2, #16
 80017aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 ff2c 	bl	800260a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699a      	ldr	r2, [r3, #24]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f042 0210 	orr.w	r2, r2, #16
 80017c0:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 f860 	bl	800388c <USB_ReadInterrupts>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017d6:	d13a      	bne.n	800184e <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 f8b0 	bl	8003942 <USB_HC_ReadInterrupt>
 80017e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	e025      	b.n	8001836 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	fa22 f303 	lsr.w	r3, r2, r3
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d018      	beq.n	8001830 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	015a      	lsls	r2, r3, #5
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001814:	d106      	bne.n	8001824 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	4619      	mov	r1, r3
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 f836 	bl	800188e <HCD_HC_IN_IRQHandler>
 8001822:	e005      	b.n	8001830 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	b2db      	uxtb	r3, r3
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fb84 	bl	8001f38 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	3301      	adds	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d3d4      	bcc.n	80017ea <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001848:	615a      	str	r2, [r3, #20]
 800184a:	e000      	b.n	800184e <HAL_HCD_IRQHandler+0x210>
      return;
 800184c:	bf00      	nop
    }
  }
}
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_HCD_Stop+0x16>
 8001866:	2302      	movs	r3, #2
 8001868:	e00d      	b.n	8001886 <HAL_HCD_Stop+0x32>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f002 f970 	bl	8003b5c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001884:	2300      	movs	r3, #0
}
 8001886:	4618      	mov	r0, r3
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	015a      	lsls	r2, r3, #5
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	d11a      	bne.n	80018f4 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	015a      	lsls	r2, r3, #5
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018ca:	461a      	mov	r2, r3
 80018cc:	2304      	movs	r3, #4
 80018ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	212c      	movs	r1, #44	; 0x2c
 80018d6:	fb01 f303 	mul.w	r3, r1, r3
 80018da:	4413      	add	r3, r2
 80018dc:	3361      	adds	r3, #97	; 0x61
 80018de:	2206      	movs	r2, #6
 80018e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	b2d2      	uxtb	r2, r2
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 f839 	bl	8003964 <USB_HC_Halt>
 80018f2:	e0af      	b.n	8001a54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	015a      	lsls	r2, r3, #5
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4413      	add	r3, r2
 80018fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001906:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800190a:	d11b      	bne.n	8001944 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	015a      	lsls	r2, r3, #5
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4413      	add	r3, r2
 8001914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001918:	461a      	mov	r2, r3
 800191a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800191e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3361      	adds	r3, #97	; 0x61
 800192e:	2207      	movs	r2, #7
 8001930:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f811 	bl	8003964 <USB_HC_Halt>
 8001942:	e087      	b.n	8001a54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 0320 	and.w	r3, r3, #32
 8001956:	2b20      	cmp	r3, #32
 8001958:	d109      	bne.n	800196e <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	015a      	lsls	r2, r3, #5
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	4413      	add	r3, r2
 8001962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001966:	461a      	mov	r2, r3
 8001968:	2320      	movs	r3, #32
 800196a:	6093      	str	r3, [r2, #8]
 800196c:	e072      	b.n	8001a54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	015a      	lsls	r2, r3, #5
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4413      	add	r3, r2
 8001976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b08      	cmp	r3, #8
 8001982:	d11a      	bne.n	80019ba <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	015a      	lsls	r2, r3, #5
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001990:	461a      	mov	r2, r3
 8001992:	2308      	movs	r3, #8
 8001994:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001996:	687a      	ldr	r2, [r7, #4]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	212c      	movs	r1, #44	; 0x2c
 800199c:	fb01 f303 	mul.w	r3, r1, r3
 80019a0:	4413      	add	r3, r2
 80019a2:	3361      	adds	r3, #97	; 0x61
 80019a4:	2205      	movs	r2, #5
 80019a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	4611      	mov	r1, r2
 80019b2:	4618      	mov	r0, r3
 80019b4:	f001 ffd6 	bl	8003964 <USB_HC_Halt>
 80019b8:	e04c      	b.n	8001a54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	015a      	lsls	r2, r3, #5
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d0:	d11b      	bne.n	8001a0a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	015a      	lsls	r2, r3, #5
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019de:	461a      	mov	r2, r3
 80019e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	212c      	movs	r1, #44	; 0x2c
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	3361      	adds	r3, #97	; 0x61
 80019f4:	2208      	movs	r2, #8
 80019f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 ffae 	bl	8003964 <USB_HC_Halt>
 8001a08:	e024      	b.n	8001a54 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1c:	2b80      	cmp	r3, #128	; 0x80
 8001a1e:	d119      	bne.n	8001a54 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	015a      	lsls	r2, r3, #5
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4413      	add	r3, r2
 8001a28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	212c      	movs	r1, #44	; 0x2c
 8001a38:	fb01 f303 	mul.w	r3, r1, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3361      	adds	r3, #97	; 0x61
 8001a40:	2206      	movs	r2, #6
 8001a42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f001 ff88 	bl	8003964 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	015a      	lsls	r2, r3, #5
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6a:	d112      	bne.n	8001a92 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	68fa      	ldr	r2, [r7, #12]
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	4611      	mov	r1, r2
 8001a76:	4618      	mov	r0, r3
 8001a78:	f001 ff74 	bl	8003964 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	015a      	lsls	r2, r3, #5
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a88:	461a      	mov	r2, r3
 8001a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a8e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001a90:	e24e      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	015a      	lsls	r2, r3, #5
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4413      	add	r3, r2
 8001a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f040 80df 	bne.w	8001c68 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	691b      	ldr	r3, [r3, #16]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d019      	beq.n	8001ae6 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	212c      	movs	r1, #44	; 0x2c
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	4413      	add	r3, r2
 8001abe:	3348      	adds	r3, #72	; 0x48
 8001ac0:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	0159      	lsls	r1, r3, #5
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	440b      	add	r3, r1
 8001aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8001ad4:	1ad2      	subs	r2, r2, r3
 8001ad6:	6879      	ldr	r1, [r7, #4]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	202c      	movs	r0, #44	; 0x2c
 8001adc:	fb00 f303 	mul.w	r3, r0, r3
 8001ae0:	440b      	add	r3, r1
 8001ae2:	3350      	adds	r3, #80	; 0x50
 8001ae4:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	212c      	movs	r1, #44	; 0x2c
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	3361      	adds	r3, #97	; 0x61
 8001af4:	2201      	movs	r2, #1
 8001af6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	212c      	movs	r1, #44	; 0x2c
 8001afe:	fb01 f303 	mul.w	r3, r1, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	335c      	adds	r3, #92	; 0x5c
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b16:	461a      	mov	r2, r3
 8001b18:	2301      	movs	r3, #1
 8001b1a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	212c      	movs	r1, #44	; 0x2c
 8001b22:	fb01 f303 	mul.w	r3, r1, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	333f      	adds	r3, #63	; 0x3f
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	212c      	movs	r1, #44	; 0x2c
 8001b36:	fb01 f303 	mul.w	r3, r1, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	333f      	adds	r3, #63	; 0x3f
 8001b3e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d111      	bne.n	8001b68 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 ff08 	bl	8003964 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	015a      	lsls	r2, r3, #5
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b60:	461a      	mov	r2, r3
 8001b62:	2310      	movs	r3, #16
 8001b64:	6093      	str	r3, [r2, #8]
 8001b66:	e03a      	b.n	8001bde <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	212c      	movs	r1, #44	; 0x2c
 8001b6e:	fb01 f303 	mul.w	r3, r1, r3
 8001b72:	4413      	add	r3, r2
 8001b74:	333f      	adds	r3, #63	; 0x3f
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d009      	beq.n	8001b90 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	212c      	movs	r1, #44	; 0x2c
 8001b82:	fb01 f303 	mul.w	r3, r1, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	333f      	adds	r3, #63	; 0x3f
 8001b8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d126      	bne.n	8001bde <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	015a      	lsls	r2, r3, #5
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	0151      	lsls	r1, r2, #5
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	440a      	add	r2, r1
 8001ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001baa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001bae:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	212c      	movs	r1, #44	; 0x2c
 8001bb6:	fb01 f303 	mul.w	r3, r1, r3
 8001bba:	4413      	add	r3, r2
 8001bbc:	3360      	adds	r3, #96	; 0x60
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	b2d9      	uxtb	r1, r3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	202c      	movs	r0, #44	; 0x2c
 8001bcc:	fb00 f303 	mul.w	r3, r0, r3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3360      	adds	r3, #96	; 0x60
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f002 f91a 	bl	8003e12 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d12b      	bne.n	8001c3e <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	212c      	movs	r1, #44	; 0x2c
 8001bec:	fb01 f303 	mul.w	r3, r1, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3348      	adds	r3, #72	; 0x48
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	202c      	movs	r0, #44	; 0x2c
 8001bfc:	fb00 f202 	mul.w	r2, r0, r2
 8001c00:	440a      	add	r2, r1
 8001c02:	3240      	adds	r2, #64	; 0x40
 8001c04:	8812      	ldrh	r2, [r2, #0]
 8001c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 818e 	beq.w	8001f30 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	212c      	movs	r1, #44	; 0x2c
 8001c1a:	fb01 f303 	mul.w	r3, r1, r3
 8001c1e:	4413      	add	r3, r2
 8001c20:	3354      	adds	r3, #84	; 0x54
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2d8      	uxtb	r0, r3
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3354      	adds	r3, #84	; 0x54
 8001c38:	4602      	mov	r2, r0
 8001c3a:	701a      	strb	r2, [r3, #0]
}
 8001c3c:	e178      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	212c      	movs	r1, #44	; 0x2c
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	3354      	adds	r3, #84	; 0x54
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	f083 0301 	eor.w	r3, r3, #1
 8001c52:	b2d8      	uxtb	r0, r3
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	212c      	movs	r1, #44	; 0x2c
 8001c5a:	fb01 f303 	mul.w	r3, r1, r3
 8001c5e:	4413      	add	r3, r2
 8001c60:	3354      	adds	r3, #84	; 0x54
 8001c62:	4602      	mov	r2, r0
 8001c64:	701a      	strb	r2, [r3, #0]
}
 8001c66:	e163      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	015a      	lsls	r2, r3, #5
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4413      	add	r3, r2
 8001c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	f040 80f6 	bne.w	8001e6c <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	212c      	movs	r1, #44	; 0x2c
 8001c86:	fb01 f303 	mul.w	r3, r1, r3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3361      	adds	r3, #97	; 0x61
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d109      	bne.n	8001ca8 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	212c      	movs	r1, #44	; 0x2c
 8001c9a:	fb01 f303 	mul.w	r3, r1, r3
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3360      	adds	r3, #96	; 0x60
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e0c9      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	212c      	movs	r1, #44	; 0x2c
 8001cae:	fb01 f303 	mul.w	r3, r1, r3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3361      	adds	r3, #97	; 0x61
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d109      	bne.n	8001cd0 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	212c      	movs	r1, #44	; 0x2c
 8001cc2:	fb01 f303 	mul.w	r3, r1, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3360      	adds	r3, #96	; 0x60
 8001cca:	2205      	movs	r2, #5
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	e0b5      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	212c      	movs	r1, #44	; 0x2c
 8001cd6:	fb01 f303 	mul.w	r3, r1, r3
 8001cda:	4413      	add	r3, r2
 8001cdc:	3361      	adds	r3, #97	; 0x61
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d009      	beq.n	8001cf8 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	212c      	movs	r1, #44	; 0x2c
 8001cea:	fb01 f303 	mul.w	r3, r1, r3
 8001cee:	4413      	add	r3, r2
 8001cf0:	3361      	adds	r3, #97	; 0x61
 8001cf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d150      	bne.n	8001d9a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	212c      	movs	r1, #44	; 0x2c
 8001cfe:	fb01 f303 	mul.w	r3, r1, r3
 8001d02:	4413      	add	r3, r2
 8001d04:	335c      	adds	r3, #92	; 0x5c
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	202c      	movs	r0, #44	; 0x2c
 8001d10:	fb00 f303 	mul.w	r3, r0, r3
 8001d14:	440b      	add	r3, r1
 8001d16:	335c      	adds	r3, #92	; 0x5c
 8001d18:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	212c      	movs	r1, #44	; 0x2c
 8001d20:	fb01 f303 	mul.w	r3, r1, r3
 8001d24:	4413      	add	r3, r2
 8001d26:	335c      	adds	r3, #92	; 0x5c
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d912      	bls.n	8001d54 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	212c      	movs	r1, #44	; 0x2c
 8001d34:	fb01 f303 	mul.w	r3, r1, r3
 8001d38:	4413      	add	r3, r2
 8001d3a:	335c      	adds	r3, #92	; 0x5c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	212c      	movs	r1, #44	; 0x2c
 8001d46:	fb01 f303 	mul.w	r3, r1, r3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3360      	adds	r3, #96	; 0x60
 8001d4e:	2204      	movs	r2, #4
 8001d50:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d52:	e073      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	212c      	movs	r1, #44	; 0x2c
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4413      	add	r3, r2
 8001d60:	3360      	adds	r3, #96	; 0x60
 8001d62:	2202      	movs	r2, #2
 8001d64:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	015a      	lsls	r2, r3, #5
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001d7c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001d84:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	461a      	mov	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d98:	e050      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3361      	adds	r3, #97	; 0x61
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d122      	bne.n	8001df4 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3360      	adds	r3, #96	; 0x60
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001dd6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dde:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	015a      	lsls	r2, r3, #5
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4413      	add	r3, r2
 8001de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dec:	461a      	mov	r2, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e023      	b.n	8001e3c <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	212c      	movs	r1, #44	; 0x2c
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	3361      	adds	r3, #97	; 0x61
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	d119      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	212c      	movs	r1, #44	; 0x2c
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	335c      	adds	r3, #92	; 0x5c
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	202c      	movs	r0, #44	; 0x2c
 8001e20:	fb00 f303 	mul.w	r3, r0, r3
 8001e24:	440b      	add	r3, r1
 8001e26:	335c      	adds	r3, #92	; 0x5c
 8001e28:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	212c      	movs	r1, #44	; 0x2c
 8001e30:	fb01 f303 	mul.w	r3, r1, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	3360      	adds	r3, #96	; 0x60
 8001e38:	2204      	movs	r2, #4
 8001e3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	b2d9      	uxtb	r1, r3
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	202c      	movs	r0, #44	; 0x2c
 8001e58:	fb00 f303 	mul.w	r3, r0, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3360      	adds	r3, #96	; 0x60
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	461a      	mov	r2, r3
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f001 ffd4 	bl	8003e12 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e6a:	e061      	b.n	8001f30 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d156      	bne.n	8001f30 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	212c      	movs	r1, #44	; 0x2c
 8001e88:	fb01 f303 	mul.w	r3, r1, r3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	333f      	adds	r3, #63	; 0x3f
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d111      	bne.n	8001eba <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	212c      	movs	r1, #44	; 0x2c
 8001e9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	335c      	adds	r3, #92	; 0x5c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 fd56 	bl	8003964 <USB_HC_Halt>
 8001eb8:	e031      	b.n	8001f1e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	212c      	movs	r1, #44	; 0x2c
 8001ec0:	fb01 f303 	mul.w	r3, r1, r3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	333f      	adds	r3, #63	; 0x3f
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d009      	beq.n	8001ee2 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	212c      	movs	r1, #44	; 0x2c
 8001ed4:	fb01 f303 	mul.w	r3, r1, r3
 8001ed8:	4413      	add	r3, r2
 8001eda:	333f      	adds	r3, #63	; 0x3f
 8001edc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d11d      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	212c      	movs	r1, #44	; 0x2c
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	4413      	add	r3, r2
 8001eee:	335c      	adds	r3, #92	; 0x5c
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d110      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3361      	adds	r3, #97	; 0x61
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f001 fd23 	bl	8003964 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	6093      	str	r3, [r2, #8]
}
 8001f30:	bf00      	nop
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d11a      	bne.n	8001f9e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f74:	461a      	mov	r2, r3
 8001f76:	2304      	movs	r3, #4
 8001f78:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3361      	adds	r3, #97	; 0x61
 8001f88:	2206      	movs	r2, #6
 8001f8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 fce4 	bl	8003964 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001f9c:	e331      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b20      	cmp	r3, #32
 8001fb2:	d12e      	bne.n	8002012 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	015a      	lsls	r2, r3, #5
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	212c      	movs	r1, #44	; 0x2c
 8001fcc:	fb01 f303 	mul.w	r3, r1, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	333d      	adds	r3, #61	; 0x3d
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 8313 	bne.w	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	212c      	movs	r1, #44	; 0x2c
 8001fe2:	fb01 f303 	mul.w	r3, r1, r3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	333d      	adds	r3, #61	; 0x3d
 8001fea:	2200      	movs	r2, #0
 8001fec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	212c      	movs	r1, #44	; 0x2c
 8001ff4:	fb01 f303 	mul.w	r3, r1, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3360      	adds	r3, #96	; 0x60
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	4611      	mov	r1, r2
 800200a:	4618      	mov	r0, r3
 800200c:	f001 fcaa 	bl	8003964 <USB_HC_Halt>
}
 8002010:	e2f7      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002028:	d112      	bne.n	8002050 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	461a      	mov	r2, r3
 8002038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800203c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	b2d2      	uxtb	r2, r2
 8002046:	4611      	mov	r1, r2
 8002048:	4618      	mov	r0, r3
 800204a:	f001 fc8b 	bl	8003964 <USB_HC_Halt>
}
 800204e:	e2d8      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	015a      	lsls	r2, r3, #5
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4413      	add	r3, r2
 8002058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b01      	cmp	r3, #1
 8002064:	d140      	bne.n	80020e8 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	212c      	movs	r1, #44	; 0x2c
 800206c:	fb01 f303 	mul.w	r3, r1, r3
 8002070:	4413      	add	r3, r2
 8002072:	335c      	adds	r3, #92	; 0x5c
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d111      	bne.n	80020b2 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	333d      	adds	r3, #61	; 0x3d
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	015a      	lsls	r2, r3, #5
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	4413      	add	r3, r2
 80020a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ac:	461a      	mov	r2, r3
 80020ae:	2340      	movs	r3, #64	; 0x40
 80020b0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020be:	461a      	mov	r2, r3
 80020c0:	2301      	movs	r3, #1
 80020c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	212c      	movs	r1, #44	; 0x2c
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4413      	add	r3, r2
 80020d0:	3361      	adds	r3, #97	; 0x61
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 fc3f 	bl	8003964 <USB_HC_Halt>
}
 80020e6:	e28c      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d12c      	bne.n	8002158 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	212c      	movs	r1, #44	; 0x2c
 8002104:	fb01 f303 	mul.w	r3, r1, r3
 8002108:	4413      	add	r3, r2
 800210a:	3361      	adds	r3, #97	; 0x61
 800210c:	2204      	movs	r2, #4
 800210e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	333d      	adds	r3, #61	; 0x3d
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	212c      	movs	r1, #44	; 0x2c
 8002128:	fb01 f303 	mul.w	r3, r1, r3
 800212c:	4413      	add	r3, r2
 800212e:	335c      	adds	r3, #92	; 0x5c
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	697a      	ldr	r2, [r7, #20]
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f001 fc10 	bl	8003964 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	015a      	lsls	r2, r3, #5
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	4413      	add	r3, r2
 800214c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002150:	461a      	mov	r2, r3
 8002152:	2340      	movs	r3, #64	; 0x40
 8002154:	6093      	str	r3, [r2, #8]
}
 8002156:	e254      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	4413      	add	r3, r2
 8002160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b08      	cmp	r3, #8
 800216c:	d11a      	bne.n	80021a4 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4413      	add	r3, r2
 8002176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217a:	461a      	mov	r2, r3
 800217c:	2308      	movs	r3, #8
 800217e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	212c      	movs	r1, #44	; 0x2c
 8002186:	fb01 f303 	mul.w	r3, r1, r3
 800218a:	4413      	add	r3, r2
 800218c:	3361      	adds	r3, #97	; 0x61
 800218e:	2205      	movs	r2, #5
 8002190:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fbe1 	bl	8003964 <USB_HC_Halt>
}
 80021a2:	e22e      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b10      	cmp	r3, #16
 80021b8:	d140      	bne.n	800223c <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3361      	adds	r3, #97	; 0x61
 80021da:	2203      	movs	r2, #3
 80021dc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	212c      	movs	r1, #44	; 0x2c
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	4413      	add	r3, r2
 80021ea:	333d      	adds	r3, #61	; 0x3d
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d112      	bne.n	8002218 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	212c      	movs	r1, #44	; 0x2c
 80021f8:	fb01 f303 	mul.w	r3, r1, r3
 80021fc:	4413      	add	r3, r2
 80021fe:	333c      	adds	r3, #60	; 0x3c
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d108      	bne.n	8002218 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	212c      	movs	r1, #44	; 0x2c
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	4413      	add	r3, r2
 8002212:	333d      	adds	r3, #61	; 0x3d
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f001 fb9e 	bl	8003964 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	4413      	add	r3, r2
 8002230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002234:	461a      	mov	r2, r3
 8002236:	2310      	movs	r3, #16
 8002238:	6093      	str	r3, [r2, #8]
}
 800223a:	e1e2      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	4413      	add	r3, r2
 8002244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800224e:	2b80      	cmp	r3, #128	; 0x80
 8002250:	d164      	bne.n	800231c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d111      	bne.n	800227e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	fb01 f303 	mul.w	r3, r1, r3
 8002264:	4413      	add	r3, r2
 8002266:	3361      	adds	r3, #97	; 0x61
 8002268:	2206      	movs	r2, #6
 800226a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	697a      	ldr	r2, [r7, #20]
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	4611      	mov	r1, r2
 8002276:	4618      	mov	r0, r3
 8002278:	f001 fb74 	bl	8003964 <USB_HC_Halt>
 800227c:	e044      	b.n	8002308 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	212c      	movs	r1, #44	; 0x2c
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	4413      	add	r3, r2
 800228a:	335c      	adds	r3, #92	; 0x5c
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	202c      	movs	r0, #44	; 0x2c
 8002296:	fb00 f303 	mul.w	r3, r0, r3
 800229a:	440b      	add	r3, r1
 800229c:	335c      	adds	r3, #92	; 0x5c
 800229e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	212c      	movs	r1, #44	; 0x2c
 80022a6:	fb01 f303 	mul.w	r3, r1, r3
 80022aa:	4413      	add	r3, r2
 80022ac:	335c      	adds	r3, #92	; 0x5c
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d920      	bls.n	80022f6 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	212c      	movs	r1, #44	; 0x2c
 80022ba:	fb01 f303 	mul.w	r3, r1, r3
 80022be:	4413      	add	r3, r2
 80022c0:	335c      	adds	r3, #92	; 0x5c
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	212c      	movs	r1, #44	; 0x2c
 80022cc:	fb01 f303 	mul.w	r3, r1, r3
 80022d0:	4413      	add	r3, r2
 80022d2:	3360      	adds	r3, #96	; 0x60
 80022d4:	2204      	movs	r2, #4
 80022d6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	b2d9      	uxtb	r1, r3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	202c      	movs	r0, #44	; 0x2c
 80022e2:	fb00 f303 	mul.w	r3, r0, r3
 80022e6:	4413      	add	r3, r2
 80022e8:	3360      	adds	r3, #96	; 0x60
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f001 fd8f 	bl	8003e12 <HAL_HCD_HC_NotifyURBChange_Callback>
 80022f4:	e008      	b.n	8002308 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3360      	adds	r3, #96	; 0x60
 8002304:	2202      	movs	r2, #2
 8002306:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	461a      	mov	r2, r3
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	6093      	str	r3, [r2, #8]
}
 800231a:	e172      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	4413      	add	r3, r2
 8002324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002332:	d11b      	bne.n	800236c <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	212c      	movs	r1, #44	; 0x2c
 800233a:	fb01 f303 	mul.w	r3, r1, r3
 800233e:	4413      	add	r3, r2
 8002340:	3361      	adds	r3, #97	; 0x61
 8002342:	2208      	movs	r2, #8
 8002344:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f001 fb07 	bl	8003964 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	4413      	add	r3, r2
 800235e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002362:	461a      	mov	r2, r3
 8002364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002368:	6093      	str	r3, [r2, #8]
}
 800236a:	e14a      	b.n	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	f040 813f 	bne.w	8002602 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	212c      	movs	r1, #44	; 0x2c
 800238a:	fb01 f303 	mul.w	r3, r1, r3
 800238e:	4413      	add	r3, r2
 8002390:	3361      	adds	r3, #97	; 0x61
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d17d      	bne.n	8002494 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	212c      	movs	r1, #44	; 0x2c
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	4413      	add	r3, r2
 80023a4:	3360      	adds	r3, #96	; 0x60
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	212c      	movs	r1, #44	; 0x2c
 80023b0:	fb01 f303 	mul.w	r3, r1, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	333f      	adds	r3, #63	; 0x3f
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d00a      	beq.n	80023d4 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	212c      	movs	r1, #44	; 0x2c
 80023c4:	fb01 f303 	mul.w	r3, r1, r3
 80023c8:	4413      	add	r3, r2
 80023ca:	333f      	adds	r3, #63	; 0x3f
 80023cc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80023ce:	2b03      	cmp	r3, #3
 80023d0:	f040 8100 	bne.w	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d113      	bne.n	8002404 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3355      	adds	r3, #85	; 0x55
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f083 0301 	eor.w	r3, r3, #1
 80023f0:	b2d8      	uxtb	r0, r3
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	3355      	adds	r3, #85	; 0x55
 8002400:	4602      	mov	r2, r0
 8002402:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b01      	cmp	r3, #1
 800240a:	f040 80e3 	bne.w	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	334c      	adds	r3, #76	; 0x4c
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80d8 	beq.w	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	212c      	movs	r1, #44	; 0x2c
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	334c      	adds	r3, #76	; 0x4c
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	202c      	movs	r0, #44	; 0x2c
 800243a:	fb00 f202 	mul.w	r2, r0, r2
 800243e:	440a      	add	r2, r1
 8002440:	3240      	adds	r2, #64	; 0x40
 8002442:	8812      	ldrh	r2, [r2, #0]
 8002444:	4413      	add	r3, r2
 8002446:	3b01      	subs	r3, #1
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	202c      	movs	r0, #44	; 0x2c
 800244e:	fb00 f202 	mul.w	r2, r0, r2
 8002452:	440a      	add	r2, r1
 8002454:	3240      	adds	r2, #64	; 0x40
 8002456:	8812      	ldrh	r2, [r2, #0]
 8002458:	fbb3 f3f2 	udiv	r3, r3, r2
 800245c:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80b5 	beq.w	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	212c      	movs	r1, #44	; 0x2c
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	4413      	add	r3, r2
 8002476:	3355      	adds	r3, #85	; 0x55
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	f083 0301 	eor.w	r3, r3, #1
 800247e:	b2d8      	uxtb	r0, r3
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	3355      	adds	r3, #85	; 0x55
 800248e:	4602      	mov	r2, r0
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e09f      	b.n	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	3361      	adds	r3, #97	; 0x61
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d109      	bne.n	80024bc <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	212c      	movs	r1, #44	; 0x2c
 80024ae:	fb01 f303 	mul.w	r3, r1, r3
 80024b2:	4413      	add	r3, r2
 80024b4:	3360      	adds	r3, #96	; 0x60
 80024b6:	2202      	movs	r2, #2
 80024b8:	701a      	strb	r2, [r3, #0]
 80024ba:	e08b      	b.n	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	212c      	movs	r1, #44	; 0x2c
 80024c2:	fb01 f303 	mul.w	r3, r1, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	3361      	adds	r3, #97	; 0x61
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d109      	bne.n	80024e4 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	212c      	movs	r1, #44	; 0x2c
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	4413      	add	r3, r2
 80024dc:	3360      	adds	r3, #96	; 0x60
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
 80024e2:	e077      	b.n	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	212c      	movs	r1, #44	; 0x2c
 80024ea:	fb01 f303 	mul.w	r3, r1, r3
 80024ee:	4413      	add	r3, r2
 80024f0:	3361      	adds	r3, #97	; 0x61
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d109      	bne.n	800250c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	212c      	movs	r1, #44	; 0x2c
 80024fe:	fb01 f303 	mul.w	r3, r1, r3
 8002502:	4413      	add	r3, r2
 8002504:	3360      	adds	r3, #96	; 0x60
 8002506:	2205      	movs	r2, #5
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e063      	b.n	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	212c      	movs	r1, #44	; 0x2c
 8002512:	fb01 f303 	mul.w	r3, r1, r3
 8002516:	4413      	add	r3, r2
 8002518:	3361      	adds	r3, #97	; 0x61
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b06      	cmp	r3, #6
 800251e:	d009      	beq.n	8002534 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	212c      	movs	r1, #44	; 0x2c
 8002526:	fb01 f303 	mul.w	r3, r1, r3
 800252a:	4413      	add	r3, r2
 800252c:	3361      	adds	r3, #97	; 0x61
 800252e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002530:	2b08      	cmp	r3, #8
 8002532:	d14f      	bne.n	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	212c      	movs	r1, #44	; 0x2c
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	4413      	add	r3, r2
 8002540:	335c      	adds	r3, #92	; 0x5c
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	6879      	ldr	r1, [r7, #4]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	202c      	movs	r0, #44	; 0x2c
 800254c:	fb00 f303 	mul.w	r3, r0, r3
 8002550:	440b      	add	r3, r1
 8002552:	335c      	adds	r3, #92	; 0x5c
 8002554:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	212c      	movs	r1, #44	; 0x2c
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4413      	add	r3, r2
 8002562:	335c      	adds	r3, #92	; 0x5c
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b02      	cmp	r3, #2
 8002568:	d912      	bls.n	8002590 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	212c      	movs	r1, #44	; 0x2c
 8002570:	fb01 f303 	mul.w	r3, r1, r3
 8002574:	4413      	add	r3, r2
 8002576:	335c      	adds	r3, #92	; 0x5c
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3360      	adds	r3, #96	; 0x60
 800258a:	2204      	movs	r2, #4
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e021      	b.n	80025d4 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80025b8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025c0:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ce:	461a      	mov	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025e0:	461a      	mov	r2, r3
 80025e2:	2302      	movs	r3, #2
 80025e4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	b2d9      	uxtb	r1, r3
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	202c      	movs	r0, #44	; 0x2c
 80025f0:	fb00 f303 	mul.w	r3, r0, r3
 80025f4:	4413      	add	r3, r2
 80025f6:	3360      	adds	r3, #96	; 0x60
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f001 fc08 	bl	8003e12 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002602:	bf00      	nop
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b08a      	sub	sp, #40	; 0x28
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	0c5b      	lsrs	r3, r3, #17
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d004      	beq.n	8002650 <HCD_RXQLVL_IRQHandler+0x46>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	2b05      	cmp	r3, #5
 800264a:	f000 80a9 	beq.w	80027a0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800264e:	e0aa      	b.n	80027a6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80a6 	beq.w	80027a4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	212c      	movs	r1, #44	; 0x2c
 800265e:	fb01 f303 	mul.w	r3, r1, r3
 8002662:	4413      	add	r3, r2
 8002664:	3344      	adds	r3, #68	; 0x44
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 809b 	beq.w	80027a4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	212c      	movs	r1, #44	; 0x2c
 8002674:	fb01 f303 	mul.w	r3, r1, r3
 8002678:	4413      	add	r3, r2
 800267a:	3350      	adds	r3, #80	; 0x50
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	441a      	add	r2, r3
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	202c      	movs	r0, #44	; 0x2c
 8002688:	fb00 f303 	mul.w	r3, r0, r3
 800268c:	440b      	add	r3, r1
 800268e:	334c      	adds	r3, #76	; 0x4c
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d87a      	bhi.n	800278c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	3344      	adds	r3, #68	; 0x44
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	b292      	uxth	r2, r2
 80026ae:	4619      	mov	r1, r3
 80026b0:	f001 f894 	bl	80037dc <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	212c      	movs	r1, #44	; 0x2c
 80026ba:	fb01 f303 	mul.w	r3, r1, r3
 80026be:	4413      	add	r3, r2
 80026c0:	3344      	adds	r3, #68	; 0x44
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	441a      	add	r2, r3
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	202c      	movs	r0, #44	; 0x2c
 80026ce:	fb00 f303 	mul.w	r3, r0, r3
 80026d2:	440b      	add	r3, r1
 80026d4:	3344      	adds	r3, #68	; 0x44
 80026d6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	212c      	movs	r1, #44	; 0x2c
 80026de:	fb01 f303 	mul.w	r3, r1, r3
 80026e2:	4413      	add	r3, r2
 80026e4:	3350      	adds	r3, #80	; 0x50
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	441a      	add	r2, r3
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	202c      	movs	r0, #44	; 0x2c
 80026f2:	fb00 f303 	mul.w	r3, r0, r3
 80026f6:	440b      	add	r3, r1
 80026f8:	3350      	adds	r3, #80	; 0x50
 80026fa:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	4413      	add	r3, r2
 8002704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	0cdb      	lsrs	r3, r3, #19
 800270c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002710:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3340      	adds	r3, #64	; 0x40
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	461a      	mov	r2, r3
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4293      	cmp	r3, r2
 8002728:	d13c      	bne.n	80027a4 <HCD_RXQLVL_IRQHandler+0x19a>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d039      	beq.n	80027a4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	015a      	lsls	r2, r3, #5
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	4413      	add	r3, r2
 8002738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002746:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800274e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	4413      	add	r3, r2
 8002758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275c:	461a      	mov	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	4413      	add	r3, r2
 800276e:	3354      	adds	r3, #84	; 0x54
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2d8      	uxtb	r0, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	212c      	movs	r1, #44	; 0x2c
 800277e:	fb01 f303 	mul.w	r3, r1, r3
 8002782:	4413      	add	r3, r2
 8002784:	3354      	adds	r3, #84	; 0x54
 8002786:	4602      	mov	r2, r0
 8002788:	701a      	strb	r2, [r3, #0]
      break;
 800278a:	e00b      	b.n	80027a4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	3360      	adds	r3, #96	; 0x60
 800279a:	2204      	movs	r2, #4
 800279c:	701a      	strb	r2, [r3, #0]
      break;
 800279e:	e001      	b.n	80027a4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80027a4:	bf00      	nop
  }
}
 80027a6:	bf00      	nop
 80027a8:	3728      	adds	r7, #40	; 0x28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b086      	sub	sp, #24
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80027da:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d10b      	bne.n	80027fe <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f001 faf2 	bl	8003dda <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 0308 	and.w	r3, r3, #8
 8002804:	2b08      	cmp	r3, #8
 8002806:	d132      	bne.n	800286e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f043 0308 	orr.w	r3, r3, #8
 800280e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b04      	cmp	r3, #4
 8002818:	d126      	bne.n	8002868 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d113      	bne.n	800284a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800282c:	d106      	bne.n	800283c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2102      	movs	r1, #2
 8002834:	4618      	mov	r0, r3
 8002836:	f001 f84a 	bl	80038ce <USB_InitFSLSPClkSel>
 800283a:	e011      	b.n	8002860 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	4618      	mov	r0, r3
 8002844:	f001 f843 	bl	80038ce <USB_InitFSLSPClkSel>
 8002848:	e00a      	b.n	8002860 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002858:	461a      	mov	r2, r3
 800285a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800285e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f001 fae4 	bl	8003e2e <HAL_HCD_PortEnabled_Callback>
 8002866:	e002      	b.n	800286e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f001 faee 	bl	8003e4a <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b20      	cmp	r3, #32
 8002876:	d103      	bne.n	8002880 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e267      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b2:	4b88      	ldr	r3, [pc, #544]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b82      	ldr	r3, [pc, #520]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b7e      	ldr	r3, [pc, #504]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e242      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x74>
 80028fa:	4b76      	ldr	r3, [pc, #472]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a75      	ldr	r2, [pc, #468]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b70      	ldr	r3, [pc, #448]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6f      	ldr	r2, [pc, #444]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6d      	ldr	r3, [pc, #436]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6c      	ldr	r2, [pc, #432]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 800292c:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b66      	ldr	r3, [pc, #408]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a65      	ldr	r2, [pc, #404]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fb80 	bl	8001050 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002954:	f7fe fb7c 	bl	8001050 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e207      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fb6c 	bl	8001050 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fb68 	bl	8001050 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	; 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1f3      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b51      	ldr	r3, [pc, #324]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b44      	ldr	r3, [pc, #272]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1c7      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fb21 	bl	8001050 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe fb1d 	bl	8001050 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1a8      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4925      	ldr	r1, [pc, #148]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe fb00 	bl	8001050 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a54:	f7fe fafc 	bl	8001050 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e187      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d036      	beq.n	8002aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <HAL_RCC_OscConfig+0x248>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe fae0 	bl	8001050 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe fadc 	bl	8001050 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e167      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	; (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x200>
 8002ab2:	e01b      	b.n	8002aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_RCC_OscConfig+0x248>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe fac9 	bl	8001050 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e00e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fac5 	bl	8001050 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d907      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e150      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470000 	.word	0x42470000
 8002adc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b88      	ldr	r3, [pc, #544]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ea      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8097 	beq.w	8002c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a7c      	ldr	r2, [pc, #496]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b77      	ldr	r3, [pc, #476]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b74      	ldr	r3, [pc, #464]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fe fa85 	bl	8001050 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe fa81 	bl	8001050 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e10c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2ea>
 8002b70:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a63      	ldr	r2, [pc, #396]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x30c>
 8002b86:	4b5f      	ldr	r3, [pc, #380]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8a:	4a5e      	ldr	r2, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	; 0x70
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a5b      	ldr	r2, [pc, #364]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002ba0:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba4:	4a57      	ldr	r2, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	; 0x70
 8002bac:	4b55      	ldr	r3, [pc, #340]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a54      	ldr	r2, [pc, #336]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fa46 	bl	8001050 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fa42 	bl	8001050 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0cb      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b49      	ldr	r3, [pc, #292]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fe fa30 	bl	8001050 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fa2c 	bl	8001050 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0b5      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	4a38      	ldr	r2, [pc, #224]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a1 	beq.w	8002d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c32:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d05c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d141      	bne.n	8002cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fa00 	bl	8001050 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe f9fc 	bl	8001050 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e087      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b27      	ldr	r3, [pc, #156]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	491b      	ldr	r1, [pc, #108]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe f9d5 	bl	8001050 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe f9d1 	bl	8001050 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e05c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x416>
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe f9be 	bl	8001050 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe f9ba 	bl	8001050 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e045      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
 8002cf6:	e03d      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e038      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d028      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d121      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d11a      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0cc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b68      	ldr	r3, [pc, #416]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d90c      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b65      	ldr	r3, [pc, #404]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d044      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d119      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b3f      	ldr	r3, [pc, #252]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3b      	ldr	r3, [pc, #236]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e067      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b37      	ldr	r3, [pc, #220]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4934      	ldr	r1, [pc, #208]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fe f8ec 	bl	8001050 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fe f8e8 	bl	8001050 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e04f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2b      	ldr	r3, [pc, #172]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b25      	ldr	r3, [pc, #148]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20c      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	; (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe f84c 	bl	8000fc8 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08003f64 	.word	0x08003f64
 8002f48:	20000330 	.word	0x20000330
 8002f4c:	20000334 	.word	0x20000334

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b094      	sub	sp, #80	; 0x50
 8002f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f60:	2300      	movs	r3, #0
 8002f62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f68:	4b79      	ldr	r3, [pc, #484]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x40>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	f200 80e1 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f82:	e0db      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b73      	ldr	r3, [pc, #460]	; (8003154 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f86:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f88:	e0db      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8a:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f8e:	e0d8      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4b6f      	ldr	r3, [pc, #444]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f98:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	2200      	movs	r2, #0
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4621      	mov	r1, r4
 8002fdc:	1a51      	subs	r1, r2, r1
 8002fde:	6139      	str	r1, [r7, #16]
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffe:	4651      	mov	r1, sl
 8003000:	018a      	lsls	r2, r1, #6
 8003002:	4651      	mov	r1, sl
 8003004:	ebb2 0801 	subs.w	r8, r2, r1
 8003008:	4659      	mov	r1, fp
 800300a:	eb63 0901 	sbc.w	r9, r3, r1
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003022:	4690      	mov	r8, r2
 8003024:	4699      	mov	r9, r3
 8003026:	4623      	mov	r3, r4
 8003028:	eb18 0303 	adds.w	r3, r8, r3
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	462b      	mov	r3, r5
 8003030:	eb49 0303 	adc.w	r3, r9, r3
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003042:	4629      	mov	r1, r5
 8003044:	024b      	lsls	r3, r1, #9
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304c:	4621      	mov	r1, r4
 800304e:	024a      	lsls	r2, r1, #9
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
 800305a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800305c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003060:	f7fd f8b2 	bl	80001c8 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800306c:	e058      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	2200      	movs	r2, #0
 8003076:	4618      	mov	r0, r3
 8003078:	4611      	mov	r1, r2
 800307a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
 8003084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	0159      	lsls	r1, r3, #5
 8003096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309a:	0150      	lsls	r0, r2, #5
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4641      	mov	r1, r8
 80030a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030a6:	4649      	mov	r1, r9
 80030a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c0:	ebb2 040a 	subs.w	r4, r2, sl
 80030c4:	eb63 050b 	sbc.w	r5, r3, fp
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	00eb      	lsls	r3, r5, #3
 80030d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d6:	00e2      	lsls	r2, r4, #3
 80030d8:	4614      	mov	r4, r2
 80030da:	461d      	mov	r5, r3
 80030dc:	4643      	mov	r3, r8
 80030de:	18e3      	adds	r3, r4, r3
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	464b      	mov	r3, r9
 80030e4:	eb45 0303 	adc.w	r3, r5, r3
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f6:	4629      	mov	r1, r5
 80030f8:	028b      	lsls	r3, r1, #10
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003100:	4621      	mov	r1, r4
 8003102:	028a      	lsls	r2, r1, #10
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310a:	2200      	movs	r2, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	61fa      	str	r2, [r7, #28]
 8003110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003114:	f7fd f858 	bl	80001c8 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003130:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b05      	ldr	r3, [pc, #20]	; (8003154 <HAL_RCC_GetSysClockFreq+0x204>)
 800313e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003144:	4618      	mov	r0, r3
 8003146:	3750      	adds	r7, #80	; 0x50
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e041      	b.n	80031f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fda2 	bl	8000ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3304      	adds	r3, #4
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f000 f968 	bl	8003470 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b02      	cmp	r3, #2
 800320e:	d122      	bne.n	8003256 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b02      	cmp	r3, #2
 800321c:	d11b      	bne.n	8003256 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f06f 0202 	mvn.w	r2, #2
 8003226:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8f8 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003242:	e005      	b.n	8003250 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8ea 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8fb 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b04      	cmp	r3, #4
 8003262:	d122      	bne.n	80032aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d11b      	bne.n	80032aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f06f 0204 	mvn.w	r2, #4
 800327a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8ce 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 8003296:	e005      	b.n	80032a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f8c0 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f8d1 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b08      	cmp	r3, #8
 80032b6:	d122      	bne.n	80032fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f06f 0208 	mvn.w	r2, #8
 80032ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2204      	movs	r2, #4
 80032d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 f8a4 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 80032ea:	e005      	b.n	80032f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f896 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8a7 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	2b10      	cmp	r3, #16
 800330a:	d122      	bne.n	8003352 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b10      	cmp	r3, #16
 8003318:	d11b      	bne.n	8003352 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0210 	mvn.w	r2, #16
 8003322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2208      	movs	r2, #8
 8003328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f87a 	bl	8003432 <HAL_TIM_IC_CaptureCallback>
 800333e:	e005      	b.n	800334c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f86c 	bl	800341e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f87d 	bl	8003446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10e      	bne.n	800337e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d107      	bne.n	800337e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0201 	mvn.w	r2, #1
 8003376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f846 	bl	800340a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003388:	2b80      	cmp	r3, #128	; 0x80
 800338a:	d10e      	bne.n	80033aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b80      	cmp	r3, #128	; 0x80
 8003398:	d107      	bne.n	80033aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f989 	bl	80036bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d10e      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c2:	2b40      	cmp	r3, #64	; 0x40
 80033c4:	d107      	bne.n	80033d6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f842 	bl	800345a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f003 0320 	and.w	r3, r3, #32
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d10e      	bne.n	8003402 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d107      	bne.n	8003402 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f06f 0220 	mvn.w	r2, #32
 80033fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f953 	bl	80036a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003432:	b480      	push	{r7}
 8003434:	b083      	sub	sp, #12
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr

08003446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003446:	b480      	push	{r7}
 8003448:	b083      	sub	sp, #12
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a40      	ldr	r2, [pc, #256]	; (8003584 <TIM_Base_SetConfig+0x114>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d013      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348e:	d00f      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a3d      	ldr	r2, [pc, #244]	; (8003588 <TIM_Base_SetConfig+0x118>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d00b      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a3c      	ldr	r2, [pc, #240]	; (800358c <TIM_Base_SetConfig+0x11c>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d007      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a3b      	ldr	r2, [pc, #236]	; (8003590 <TIM_Base_SetConfig+0x120>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_Base_SetConfig+0x40>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a3a      	ldr	r2, [pc, #232]	; (8003594 <TIM_Base_SetConfig+0x124>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d108      	bne.n	80034c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	4313      	orrs	r3, r2
 80034c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a2f      	ldr	r2, [pc, #188]	; (8003584 <TIM_Base_SetConfig+0x114>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d02b      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d027      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <TIM_Base_SetConfig+0x118>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d023      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a2b      	ldr	r2, [pc, #172]	; (800358c <TIM_Base_SetConfig+0x11c>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01f      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a2a      	ldr	r2, [pc, #168]	; (8003590 <TIM_Base_SetConfig+0x120>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01b      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a29      	ldr	r2, [pc, #164]	; (8003594 <TIM_Base_SetConfig+0x124>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d017      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a28      	ldr	r2, [pc, #160]	; (8003598 <TIM_Base_SetConfig+0x128>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d013      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <TIM_Base_SetConfig+0x12c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00f      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a26      	ldr	r2, [pc, #152]	; (80035a0 <TIM_Base_SetConfig+0x130>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d00b      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <TIM_Base_SetConfig+0x134>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a24      	ldr	r2, [pc, #144]	; (80035a8 <TIM_Base_SetConfig+0x138>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0xb2>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a23      	ldr	r2, [pc, #140]	; (80035ac <TIM_Base_SetConfig+0x13c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a0a      	ldr	r2, [pc, #40]	; (8003584 <TIM_Base_SetConfig+0x114>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_Base_SetConfig+0xf8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0c      	ldr	r2, [pc, #48]	; (8003594 <TIM_Base_SetConfig+0x124>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d103      	bne.n	8003570 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	691a      	ldr	r2, [r3, #16]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	615a      	str	r2, [r3, #20]
}
 8003576:	bf00      	nop
 8003578:	3714      	adds	r7, #20
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40010000 	.word	0x40010000
 8003588:	40000400 	.word	0x40000400
 800358c:	40000800 	.word	0x40000800
 8003590:	40000c00 	.word	0x40000c00
 8003594:	40010400 	.word	0x40010400
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400
 80035a0:	40014800 	.word	0x40014800
 80035a4:	40001800 	.word	0x40001800
 80035a8:	40001c00 	.word	0x40001c00
 80035ac:	40002000 	.word	0x40002000

080035b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e05a      	b.n	800367e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d022      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d01d      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1d      	ldr	r2, [pc, #116]	; (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d018      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1a      	ldr	r2, [pc, #104]	; (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00e      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a18      	ldr	r2, [pc, #96]	; (800369c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d009      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a17      	ldr	r2, [pc, #92]	; (80036a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a15      	ldr	r2, [pc, #84]	; (80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d10c      	bne.n	800366c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003658:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4313      	orrs	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	40010000 	.word	0x40010000
 8003690:	40000400 	.word	0x40000400
 8003694:	40000800 	.word	0x40000800
 8003698:	40000c00 	.word	0x40000c00
 800369c:	40010400 	.word	0x40010400
 80036a0:	40014000 	.word	0x40014000
 80036a4:	40001800 	.word	0x40001800

080036a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f023 0201 	bic.w	r2, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3301      	adds	r3, #1
 8003726:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4a13      	ldr	r2, [pc, #76]	; (8003778 <USB_FlushTxFifo+0x64>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d901      	bls.n	8003734 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e01b      	b.n	800376c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	daf2      	bge.n	8003722 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	019b      	lsls	r3, r3, #6
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	3301      	adds	r3, #1
 8003750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	4a08      	ldr	r2, [pc, #32]	; (8003778 <USB_FlushTxFifo+0x64>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d901      	bls.n	800375e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e006      	b.n	800376c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0320 	and.w	r3, r3, #32
 8003766:	2b20      	cmp	r3, #32
 8003768:	d0f0      	beq.n	800374c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	00030d40 	.word	0x00030d40

0800377c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3301      	adds	r3, #1
 800378c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	4a11      	ldr	r2, [pc, #68]	; (80037d8 <USB_FlushRxFifo+0x5c>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e018      	b.n	80037cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	daf2      	bge.n	8003788 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2210      	movs	r2, #16
 80037aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <USB_FlushRxFifo+0x5c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e006      	b.n	80037cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d0f0      	beq.n	80037ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	00030d40 	.word	0x00030d40

080037dc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80037dc:	b480      	push	{r7}
 80037de:	b08b      	sub	sp, #44	; 0x2c
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80037f2:	88fb      	ldrh	r3, [r7, #6]
 80037f4:	089b      	lsrs	r3, r3, #2
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	f003 0303 	and.w	r3, r3, #3
 8003800:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
 8003806:	e014      	b.n	8003832 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	601a      	str	r2, [r3, #0]
    pDest++;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	3301      	adds	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	3301      	adds	r3, #1
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003822:	3301      	adds	r3, #1
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	3301      	adds	r3, #1
 800382a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	3301      	adds	r3, #1
 8003830:	623b      	str	r3, [r7, #32]
 8003832:	6a3a      	ldr	r2, [r7, #32]
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	429a      	cmp	r2, r3
 8003838:	d3e6      	bcc.n	8003808 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800383a:	8bfb      	ldrh	r3, [r7, #30]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d01e      	beq.n	800387e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800384a:	461a      	mov	r2, r3
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
 8003860:	b2da      	uxtb	r2, r3
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	701a      	strb	r2, [r3, #0]
      i++;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	3301      	adds	r3, #1
 800386a:	623b      	str	r3, [r7, #32]
      pDest++;
 800386c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386e:	3301      	adds	r3, #1
 8003870:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003872:	8bfb      	ldrh	r3, [r7, #30]
 8003874:	3b01      	subs	r3, #1
 8003876:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003878:	8bfb      	ldrh	r3, [r7, #30]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ea      	bne.n	8003854 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003880:	4618      	mov	r0, r3
 8003882:	372c      	adds	r7, #44	; 0x2c
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80038a4:	68fb      	ldr	r3, [r7, #12]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	f003 0301 	and.w	r3, r3, #1
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038ec:	f023 0303 	bic.w	r3, r3, #3
 80038f0:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	f003 0303 	and.w	r3, r3, #3
 8003900:	68f9      	ldr	r1, [r7, #12]
 8003902:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800390a:	78fb      	ldrb	r3, [r7, #3]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003916:	461a      	mov	r2, r3
 8003918:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800391c:	6053      	str	r3, [r2, #4]
 800391e:	e009      	b.n	8003934 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d106      	bne.n	8003934 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800392c:	461a      	mov	r2, r3
 800392e:	f241 7370 	movw	r3, #6000	; 0x1770
 8003932:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003942:	b480      	push	{r7}
 8003944:	b085      	sub	sp, #20
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	b29b      	uxth	r3, r3
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8003964:	b480      	push	{r7}
 8003966:	b089      	sub	sp, #36	; 0x24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	460b      	mov	r3, r1
 800396e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8003974:	78fb      	ldrb	r3, [r7, #3]
 8003976:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0c9b      	lsrs	r3, r3, #18
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	4413      	add	r3, r2
 800399a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	0fdb      	lsrs	r3, r3, #31
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d104      	bne.n	80039be <USB_HC_Halt+0x5a>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e0c8      	b.n	8003b50 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <USB_HC_Halt+0x66>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d163      	bne.n	8003a92 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	015a      	lsls	r2, r3, #5
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	4413      	add	r3, r2
 80039d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	0151      	lsls	r1, r2, #5
 80039dc:	69fa      	ldr	r2, [r7, #28]
 80039de:	440a      	add	r2, r1
 80039e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80039e8:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0320 	and.w	r3, r3, #32
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f040 80ab 	bne.w	8003b4e <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d133      	bne.n	8003a6c <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	0151      	lsls	r1, r2, #5
 8003a16:	69fa      	ldr	r2, [r7, #28]
 8003a18:	440a      	add	r2, r1
 8003a1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a22:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a42:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3301      	adds	r3, #1
 8003a48:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a50:	d81d      	bhi.n	8003a8e <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a68:	d0ec      	beq.n	8003a44 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003a6a:	e070      	b.n	8003b4e <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69ba      	ldr	r2, [r7, #24]
 8003a7c:	0151      	lsls	r1, r2, #5
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	440a      	add	r2, r1
 8003a82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a8a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003a8c:	e05f      	b.n	8003b4e <USB_HC_Halt+0x1ea>
            break;
 8003a8e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003a90:	e05d      	b.n	8003b4e <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	0151      	lsls	r1, r2, #5
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ab0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d133      	bne.n	8003b2a <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	0151      	lsls	r1, r2, #5
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	440a      	add	r2, r1
 8003ad8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ae0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	0151      	lsls	r1, r2, #5
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	440a      	add	r2, r1
 8003af8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003afc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b00:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b0e:	d81d      	bhi.n	8003b4c <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b26:	d0ec      	beq.n	8003b02 <USB_HC_Halt+0x19e>
 8003b28:	e011      	b.n	8003b4e <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e000      	b.n	8003b4e <USB_HC_Halt+0x1ea>
          break;
 8003b4c:	bf00      	nop
    }
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3724      	adds	r7, #36	; 0x24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fdbe 	bl	80036f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b76:	2110      	movs	r1, #16
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff fdcb 	bl	8003714 <USB_FlushTxFifo>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff fdf7 	bl	800377c <USB_FlushRxFifo>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	e01f      	b.n	8003bde <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003bb4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	2b0f      	cmp	r3, #15
 8003be2:	d9dc      	bls.n	8003b9e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	61bb      	str	r3, [r7, #24]
 8003be8:	e034      	b.n	8003c54 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	015a      	lsls	r2, r3, #5
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c00:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	015a      	lsls	r2, r3, #5
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	4413      	add	r3, r2
 8003c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1e:	461a      	mov	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3301      	adds	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c30:	d80c      	bhi.n	8003c4c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c48:	d0ec      	beq.n	8003c24 <USB_StopHost+0xc8>
 8003c4a:	e000      	b.n	8003c4e <USB_StopHost+0xf2>
        break;
 8003c4c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	3301      	adds	r3, #1
 8003c52:	61bb      	str	r3, [r7, #24]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	2b0f      	cmp	r3, #15
 8003c58:	d9c7      	bls.n	8003bea <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c60:	461a      	mov	r2, r3
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c66:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c6e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fd2d 	bl	80036d0 <USB_EnableGlobalInt>

  return ret;
 8003c76:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3720      	adds	r7, #32
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f804 	bl	8003ca4 <USBH_HandleSof>
}
 8003c9c:	bf00      	nop
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b0b      	cmp	r3, #11
 8003cb4:	d10a      	bne.n	8003ccc <USBH_HandleSof+0x28>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d005      	beq.n	8003ccc <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
  }
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8003ce4:	bf00      	nop
}
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8003d00:	bf00      	nop
}
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f883 	bl	8003e66 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	791b      	ldrb	r3, [r3, #4]
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f80b 	bl	8003d82 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	795b      	ldrb	r3, [r3, #5]
 8003d70:	4619      	mov	r1, r3
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f805 	bl	8003d82 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	2b0f      	cmp	r3, #15
 8003d92:	d80d      	bhi.n	8003db0 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	33e0      	adds	r3, #224	; 0xe0
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	33e0      	adds	r3, #224	; 0xe0
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8003dbe:	b580      	push	{r7, lr}
 8003dc0:	b082      	sub	sp, #8
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff ff57 	bl	8003c80 <USBH_LL_IncTimer>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff8f 	bl	8003d0c <USBH_LL_Connect>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b082      	sub	sp, #8
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff ff98 	bl	8003d3a <USBH_LL_Disconnect>
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	70fb      	strb	r3, [r7, #3]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff49 	bl	8003cd4 <USBH_LL_PortEnabled>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff ff49 	bl	8003cf0 <USBH_LL_PortDisabled>
}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fce9 	bl	8001854 <HAL_HCD_Stop>
 8003e82:	4603      	mov	r3, r0
 8003e84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f000 f807 	bl	8003e9c <USBH_Get_USB_Status>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8003e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8003eaa:	79fb      	ldrb	r3, [r7, #7]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d817      	bhi.n	8003ee0 <USBH_Get_USB_Status+0x44>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <USBH_Get_USB_Status+0x1c>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003ecf 	.word	0x08003ecf
 8003ec0:	08003ed5 	.word	0x08003ed5
 8003ec4:	08003edb 	.word	0x08003edb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
    break;
 8003ecc:	e00b      	b.n	8003ee6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8003ed2:	e008      	b.n	8003ee6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8003ed8:	e005      	b.n	8003ee6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8003eda:	2302      	movs	r3, #2
 8003edc:	73fb      	strb	r3, [r7, #15]
    break;
 8003ede:	e002      	b.n	8003ee6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	73fb      	strb	r3, [r7, #15]
    break;
 8003ee4:	bf00      	nop
  }
  return usb_status;
 8003ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	; (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	; (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	; (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 f820 	bl	8003f4c <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08003f7c 	.word	0x08003f7c
 8003f30:	08003f7c 	.word	0x08003f7c
 8003f34:	08003f7c 	.word	0x08003f7c
 8003f38:	08003f80 	.word	0x08003f80

08003f3c <memset>:
 8003f3c:	4402      	add	r2, r0
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d100      	bne.n	8003f46 <memset+0xa>
 8003f44:	4770      	bx	lr
 8003f46:	f803 1b01 	strb.w	r1, [r3], #1
 8003f4a:	e7f9      	b.n	8003f40 <memset+0x4>

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
